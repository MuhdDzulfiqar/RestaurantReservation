@inject HttpClient _client

<EditForm Model="@promotion" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Restaurant: </label>
            <div>
                <InputSelect @bind-Value="promotion.RestaurantID" class="form-control">
                    <option value="">-- Select Restaurant --</option>
                    @if (Restaurants != null)
                    {
                        foreach (var restaurant in Restaurants)
                        {
                            <option value="@restaurant.Id">
                                @restaurant.Name @restaurant.Address - @restaurant.ContactNumber
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => promotion.RestaurantID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@promotion.Name" class="form-control" />
                <ValidationMessage For="@(() => promotion.Name)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Start: </label>
            <div>
                <InputDate @bind-Value="@promotion.DateStart" class="form-control" />
                <ValidationMessage For="@(() => promotion.DateStart)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date End: </label>
            <div>
                <InputDate @bind-Value="@promotion.DateEnd" class="form-control" />
                <ValidationMessage For="@(() => promotion.DateEnd)" />
            </div>
        </div>

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="promotions" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Promotion promotion { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Restaurant> Restaurants;

    protected async override Task OnInitializedAsync()
    {
        Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
    }
}