@page "/certifications/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Certification</h3>

<a href="/certifications/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Certification
</a>
<br />
<br />

@if (Certification == null)
{
    <div class="alert alert-info">Loading Certification...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Certification</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var certification in Certification)
            {
                <tr>
                    <td>@certification.Status</td>
                    <td>
                        <a href="/certification/view/@certification.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/certification/edit/@certification.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(certification.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Certification> Certification;

    protected async override Task OnInitializedAsync()
    {
        Certification = await _client.GetFromJsonAsync<List<Certification>>($"{Endpoints.CertificationsEndpoint}");
    }

    async Task Delete(int certificationId)
    {
        var certification = Certification.First(q => q.Id == certificationId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {certification.Status}?");
        if (confirm)

        {
            await _client.DeleteAsync($"{Endpoints.CertificationsEndpoint}/{certificationId}");
            await OnInitializedAsync();
        }
    }

}
